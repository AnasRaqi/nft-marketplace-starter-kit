{"ast":null,"code":"import _toConsumableArray from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first thing is to detect etheruem provider like metamask. \n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                // modern browsers check \n                // if there is a provider, then log it is working \n                if (provider) {\n                  console.log('Ethereum wallet is connected');\n                  window.web3 = new Web3(provider);\n                } else {\n                  // no etherum provider\n                  console.log('no eth wallet detected');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts\n                }); //   console.log(this.state.account);\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(this.state.contract); // call the total supply of our krypto Birdz\n                // grab the total supply in the front end and log the results\n\n                _context3.next = 17;\n                return contract.methods.totalSupply().call();\n\n              case 17:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); // setup an array to keep track of tokens. \n                // load the kryptobirdz. \n\n                i = 1;\n\n              case 20:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                _context3.next = 23;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 23:\n                _KryptoBird = _context3.sent;\n                this.setState({\n                  KryptoBirdz: [].concat(_toConsumableArray(KryptoBirdz), [_KryptoBird])\n                });\n\n              case 25:\n                i++;\n                _context3.next = 20;\n                break;\n\n              case 28:\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('Smart Contract is not deployed');\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    // to handle the state \n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      KryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Krypto birds NFT\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px3 \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.state.account))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/araqi/OneDrive - MAF Retail/2022/Study/NFT/Section8/VSC/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","App","loadWeb3","loadBlockchainData","provider","console","log","window","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","state","methods","totalSupply","call","i","kryptoBirdz","KryptoBirdz","alert","props","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\n\n\n\nclass App extends Component {\n\n    async componentDidMount (){\n        await this.loadWeb3();\n        await this.loadBlockchainData();\n    }\n    \n\n\n    // first thing is to detect etheruem provider like metamask. \n    async loadWeb3(){\n        const provider = await detectEthereumProvider();\n        // modern browsers check \n        // if there is a provider, then log it is working \n        if (provider){\n            console.log('Ethereum wallet is connected')\n            window.web3 = new Web3(provider)\n        } else {\n            // no etherum provider\n            console.log('no eth wallet detected')\n        }\n\n    }\n\n    async loadBlockchainData(){\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts();\n        this.setState({account:accounts})\n     //   console.log(this.state.account);\n        const networkId = await web3.eth.net.getId()\n        const networkData = KryptoBird.networks[networkId]\n        if (networkData){\n            const abi = KryptoBird.abi;\n            const address = networkData.address;\n            const contract = new web3.eth.contract(abi,address);\n            this.setState({contract})\n            console.log(this.state.contract)\n            // call the total supply of our krypto Birdz\n            // grab the total supply in the front end and log the results\n            const totalSupply = await contract.methods.totalSupply().call()\n            this.setState({totalSupply})\n            // setup an array to keep track of tokens. \n            // load the kryptobirdz. \n            for(i=1; i <= totalSupply; i++){\n                const KryptoBird = await contract.methods.kryptoBirdz(i -1).call()\n                this.setState({\n                    KryptoBirdz:[...KryptoBirdz, KryptoBird]\n                })\n                \n            }\n\n        }else{\n            window.alert('Smart Contract is not deployed')\n        }\n    } \n\n    constructor(props){\n        // to handle the state \n        super(props);\n        this.state = {\n            account: '',\n            contract:null,\n            totalSupply:0,\n            KryptoBirdz:[]\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-dark fixed-top bg-dark\">\n                <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\" style={{color:'white'}}>\n                    \n                    Krypto birds NFT\n                </div>\n                <ul className=\"navbar-nav px3 \">\n                <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\"></li>\n                <small className=\"text-white\">\n                    {this.state.account}\n                </small>\n                </ul>\n                </nav>\n                \n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}